$enableLayoutMarkupFix: false !default;

._o-layout {
  display: flex; 
  flex-wrap: wrap;
  margin: 0 (($globalSpacing / 2) * -1);
  padding: 0;
  list-style: none;

  @if ($enableLayoutMarkupFix == false) {
    font-size: 0;
  }
}

._o-layout__item {
  box-sizing: border-box; /* [1] */
  display: flex; /* [2] */
  flex-wrap: wrap;
  vertical-align: top; /* [3] */
  width: 100%; /* [4] */
  padding-right: ($globalSpacing / 2); /* [5] */
  padding-left: ($globalSpacing / 2); /* [5] */

  @if ($enableLayoutMarkupFix == false) {
    font-size: 1rem; /* [6] */
  }

  & > * {
    width: 100%;
  }
}

/* Modifiers
 * ========================================================================== */

@mixin layoutModifiers($breakpoint: null) {
  /* Flush
   * --------------------------- */

  ._o-layout--flush#{$breakpoint} {
    margin: 0;

    > ._o-layout__item {
      padding-right: 0;
      padding-left: 0;
    }
  }

  /* Auto Width
   * --------------------------- */

  /**
   * Cause layout items to take up a non-explicit amount of width.
   */
  ._o-layout--auto#{$breakpoint} > ._o-layout__item {
    width: auto;
  }

  /* Spacing
   * --------------------------- */

  @each $spacingName, $spacingFactor in $globalSpacingFactors {
    ._o-layout--#{$spacingName}#{$breakpoint} {
      margin: (0 (($globalSpacing * $spacingFactor) / 2) * -1);

      > ._o-layout__item {
        padding-right: (($globalSpacing * $spacingFactor) / 2);
        padding-left: (($globalSpacing * $spacingFactor) / 2);
      }
    }
  }

  /* Vertical Alignment
   * --------------------------- */

  /**
   * Align all grid items to the tops of each other.
   */
  ._o-layout--top#{$breakpoint} > ._o-layout__item {
    vertical-align: top;
  }

  /**
   * Align all grid items to the middles of each other.
   */
  ._o-layout--middle#{$breakpoint} > ._o-layout__item {
    vertical-align: middle;
  }

  /**
   * Align all grid items to the bottoms of each other.
   */
  ._o-layout--bottom#{$breakpoint} > ._o-layout__item {
    vertical-align: bottom;
  }

  /* Horizontal Alignment
   * --------------------------- */

  /**
   * Fill up the layout system from the left.
   */
  ._o-layout--left#{$breakpoint} {
    text-align: left;
  }

  /**
   * Fill up the layout system from the center.
   */
  ._o-layout--center#{$breakpoint} {
    text-align: center;

    > ._o-layout__item {
      text-align: left;
    }
  }

  /**
   * Fill up the layout system from the right.
   */
  ._o-layout--right#{$breakpoint} {
    text-align: right;

    > ._o-layout__item {
      text-align: left;
    }
  }

  /**
   * Reverse the rendered order of the grid system.
   */
  ._o-layout--reverse#{$breakpoint} {
    direction: rtl;

    > ._o-layout__item {
      direction: ltr;
      text-align: left;
    }
  }

  /**
   * Bring back rendered order of the grid system.
   */
  ._o-layout--forward#{$breakpoint} {
    direction: ltr;
  }

  /* Inset
   * --------------------------- */

  /**
   * 1. Reset negative margins on the layout object to zero so that inner grid
   *    items are inset from the edges of the wrapping layout object, i.e. the
   *    layout object will include both inner and outer gutters around grid
   *    items. Note: when using the inset modifier, you'd like use a wrapper
   *    object with the flush modifier.
   */
  ._o-layout--inset {
    margin: 0; /* [1] */
  }
}

@include layoutModifiers();
